/**
 * Script de configuration pour le d√©ploiement sur Vercel
 */
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Pr√©paration de l\'environnement de build...');

// Configuration de l'environnement
process.env.NEXT_TELEMETRY_DISABLED = '1';
process.env.SKIP_TYPE_CHECK = 'true';
process.env.NODE_OPTIONS = '--max-old-space-size=4096';

try {
  // Chemins importants
  const rootDir = __dirname;
  const frontendDir = path.join(rootDir, 'frontend');
  const srcDir = path.join(frontendDir, 'src');
  const appDir = path.join(srcDir, 'app');
  const pagesDir = path.join(srcDir, 'pages');
  const nodeModulesPath = path.join(frontendDir, 'node_modules', '@');

  console.log('üìÇ V√©rification des chemins critiques:');
  console.log(`- Root: ${rootDir}`);
  console.log(`- Frontend: ${frontendDir}`);
  console.log(`- Src: ${srcDir}`);
  console.log(`- App: ${appDir}`);
  console.log(`- Pages: ${pagesDir}`);

  // V√©rifier que les r√©pertoires existent
  if (!fs.existsSync(frontendDir)) {
    console.error('‚ùå Erreur: Le dossier frontend n\'existe pas');
    process.exit(1);
  }

  if (!fs.existsSync(srcDir)) {
    console.error('‚ùå Erreur: Le dossier src n\'existe pas');
    fs.mkdirSync(srcDir, { recursive: true });
    console.log('‚úÖ Dossier src cr√©√©');
  }

  // D√©tecter quel mode de routing est utilis√© (app ou pages) et s'assurer qu'ils ne sont pas en conflit
  const appDirExists = fs.existsSync(appDir);
  const pagesDirExists = fs.existsSync(pagesDir);
  const appPageExists = appDirExists && fs.existsSync(path.join(appDir, 'page.tsx'));
  const pagesIndexExists = pagesDirExists && fs.existsSync(path.join(pagesDir, 'index.tsx'));

  // Supprimer le fichier pages/index.tsx s'il y a conflit avec app/page.tsx
  if (appPageExists && pagesIndexExists) {
    console.log('‚ö†Ô∏è Conflit d√©tect√© entre app/page.tsx et pages/index.tsx - Suppression de pages/index.tsx');
    fs.unlinkSync(path.join(pagesDir, 'index.tsx'));
  }
  
  // S√©lectionner un mode de routing principal (privil√©gier App Router si existant)
  let useAppRouter = true;
  
  if (appDirExists && fs.readdirSync(appDir).length > 0) {
    console.log('‚úÖ Utilisation du App Router (dossier app)');
    useAppRouter = true;
  } else if (pagesDirExists && fs.readdirSync(pagesDir).length > 0) {
    console.log('‚úÖ Utilisation du Pages Router (dossier pages)');
    useAppRouter = false;
  } else {
    console.log('üîç Aucun routeur trouv√©, cr√©ation de l\'App Router par d√©faut');
    useAppRouter = true;
  }
  
  // Cr√©er le routeur manquant en fonction de la d√©tection
  if (useAppRouter) {
    // Utiliser App Router: cr√©er le dossier app et les fichiers n√©cessaires
    if (!fs.existsSync(appDir)) {
      console.log('üìÅ Cr√©ation du dossier app...');
      fs.mkdirSync(appDir, { recursive: true });
    }
    
    // Cr√©er app/page.tsx s'il n'existe pas
    const appPagePath = path.join(appDir, 'page.tsx');
    if (!fs.existsSync(appPagePath)) {
      console.log('üìù Cr√©ation de app/page.tsx');
      const pageContent = `export default function Page() {
  return <div>SurveyPro Application</div>;
}`;
      fs.writeFileSync(appPagePath, pageContent);
    }
    
    // Cr√©er app/layout.tsx s'il n'existe pas
    const layoutPath = path.join(appDir, 'layout.tsx');
    if (!fs.existsSync(layoutPath)) {
      console.log('üìù Cr√©ation de app/layout.tsx');
      const layoutContent = `export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  );
}`;
      fs.writeFileSync(layoutPath, layoutContent);
    }
    
    // Suppression du dossier pages s'il est vide
    if (pagesDirExists) {
      const pagesFiles = fs.readdirSync(pagesDir);
      if (pagesFiles.length === 0) {
        console.log('üßπ Suppression du dossier pages vide...');
        fs.rmdirSync(pagesDir);
      } else {
        console.log('‚ö†Ô∏è Le dossier pages contient des fichiers, v√©rifiez qu\'il n\'y a pas de conflit avec app');
      }
    }
  } else {
    // Utiliser Pages Router: cr√©er le dossier pages et les fichiers n√©cessaires
    if (!fs.existsSync(pagesDir)) {
      console.log('üìÅ Cr√©ation du dossier pages...');
      fs.mkdirSync(pagesDir, { recursive: true });
    }
    
    // Cr√©er pages/index.tsx s'il n'existe pas
    const indexPath = path.join(pagesDir, 'index.tsx');
    if (!fs.existsSync(indexPath)) {
      console.log('üìù Cr√©ation de pages/index.tsx');
      const indexContent = `export default function Home() {
  return <div>SurveyPro Application</div>;
}`;
      fs.writeFileSync(indexPath, indexContent);
    }
    
    // Cr√©er pages/_app.tsx s'il n'existe pas
    const appPath = path.join(pagesDir, '_app.tsx');
    if (!fs.existsSync(appPath)) {
      console.log('üìù Cr√©ation de pages/_app.tsx');
      const appContent = `import type { AppProps } from 'next/app';

export default function App({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />;
}`;
      fs.writeFileSync(appPath, appContent);
    }
    
    // Suppression du dossier app s'il est vide
    if (appDirExists) {
      const appFiles = fs.readdirSync(appDir);
      if (appFiles.length === 0) {
        console.log('üßπ Suppression du dossier app vide...');
        fs.rmdirSync(appDir);
      } else {
        console.log('‚ö†Ô∏è Le dossier app contient des fichiers, v√©rifiez qu\'il n\'y a pas de conflit avec pages');
      }
    }
  }

  // Cr√©er un lien symbolique pour @/
  if (fs.existsSync(srcDir)) {
    if (!fs.existsSync(path.dirname(nodeModulesPath))) {
      console.log('üìÅ Cr√©ation du dossier node_modules/@');
      fs.mkdirSync(path.dirname(nodeModulesPath), { recursive: true });
    }

    try {
      // Supprimer le lien symbolique s'il existe d√©j√†
      if (fs.existsSync(nodeModulesPath)) {
        fs.unlinkSync(nodeModulesPath);
      }

      // Cr√©er le lien symbolique
      console.log('üîó Cr√©ation du lien symbolique pour @/');
      fs.symlinkSync(srcDir, nodeModulesPath, 'dir');
    } catch (error) {
      console.log('‚ö†Ô∏è Impossible de cr√©er le lien symbolique, utilisation d\'une m√©thode alternative');
      console.log(error.message);

      // Alternative: copier le contenu du dossier si symlink √©choue
      if (!fs.existsSync(nodeModulesPath)) {
        fs.mkdirSync(nodeModulesPath, { recursive: true });
      }
      
      console.log('üìã Copie des fichiers au lieu du lien symbolique...');
      execSync(`cp -r ${srcDir}/* ${nodeModulesPath}/`);
    }
  }

  // Cr√©er un .babelrc pour s'assurer que les imports fonctionnent
  const babelrcPath = path.join(frontendDir, '.babelrc');
  if (!fs.existsSync(babelrcPath)) {
    console.log('üìù Cr√©ation du fichier .babelrc...');
    const babelrcContent = `{
  "presets": ["next/babel"],
  "plugins": [
    ["module-resolver", {
      "root": ["./"],
      "alias": {
        "@": "./src"
      }
    }]
  ]
}`;
    fs.writeFileSync(babelrcPath, babelrcContent);
  }

  // Nettoyer le cache .next si n√©cessaire
  const nextCacheDir = path.join(frontendDir, '.next');
  if (fs.existsSync(nextCacheDir)) {
    console.log('üßπ Nettoyage du cache Next.js...');
    fs.rmSync(nextCacheDir, { recursive: true, force: true });
  }

  console.log('‚úÖ Pr√©paration termin√©e avec succ√®s!');
} catch (error) {
  console.error('‚ùå Erreur lors de la pr√©paration du build:', error);
  // Ne pas √©chouer le processus pour √©viter de bloquer le build
} 